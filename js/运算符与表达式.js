// 表达式定义：表达式可以计算出一个值，并且可以包含变量、运算符和函数调用。表达式可以用于赋值、条件判断、循环等场景。

// 1.算术表达式：用于执行基本的算术运算，如加法、减法、乘法、除法和取余等。
1 + 2; // 3

// 2.关系表达式：用于比较两个值的大小关系，如等于、不等于、大于、小于、大于等于、小于等于等。
1 == 2; // false

// 3.逻辑表达式：用于执行逻辑运算，如与、或、非等。
true && false; // false
true || false; // true
!true; // false

// 4.赋值表达式：用于将一个值赋给一个变量。
let x = 5;

// 5.条件表达式：用于根据条件执行不同的代码块，如if语句和三元运算符。
if (x > 0) {
  console.log('x is positive');
}

// 6.函数调用表达式：用于调用一个函数，并返回函数的返回值。
const fn = () => 10;

// 7.字面量
123;
('hello world');

// 运算符定义：运算符用于对表达式进行操作，并返回一个结果。运算符可以是一元运算符（只对一个操作数进行操作），也可以是二元运算符（对两个操作数进行操作）。
// 1.算术运算符：用于执行基本的算术运算，如加法、减法、乘法、除法和取余等。
// 2.关系运算符：用于比较两个值的大小关系，如等于、不等于、大于、小于、大于等于、小于等于等。
// 3.逻辑运算符：用于执行逻辑运算，如与、或、非等。
// 4.赋值运算符：用于将一个值赋给一个变量。
// 5.条件运算符：用于根据条件执行不同的代码块，如if语句和三元运算符。
// 6.函数调用运算符：用于调用一个函数，并返回函数的返回值。
// 7.字面量运算符：用于创建字面量，如数字、字符串、数组、对象等。
// 8.运算符优先级：用于确定运算符的执行顺序，如乘法、除法、加法、减法等。

// 赋值运算符示例：
let n = 5;
n += 3; // n = n + 3
n -= 2; // n = n - 2
n *= 4; // n = n * 4
n /= 2; // n = n / 2
n %= 3; // n = n % 3
n++; // n = n + 1
n--; // n = n - 1
++n; // n = n + 1
--n; // n = n - 1
n ||= 10; // n = n || 10
n &&= 20; // n = n && 20
n ??= 30; // n = n ?? 30
n &= 40; // n = n & 40
n |= 50; // n = n | 50
